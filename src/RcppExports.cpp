// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// private_cfd_score
Rcpp::List private_cfd_score(Rcpp::List activity_scores, Rcpp::CharacterVector guide, Rcpp::CharacterVector genome, Rcpp::CharacterVector pam, Rcpp::LogicalVector strict);
RcppExport SEXP _CFDscoRe_private_cfd_score(SEXP activity_scoresSEXP, SEXP guideSEXP, SEXP genomeSEXP, SEXP pamSEXP, SEXP strictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type activity_scores(activity_scoresSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type guide(guideSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type genome(genomeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type pam(pamSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type strict(strictSEXP);
    rcpp_result_gen = Rcpp::wrap(private_cfd_score(activity_scores, guide, genome, pam, strict));
    return rcpp_result_gen;
END_RCPP
}
// private_optimal_alignment
Rcpp::List private_optimal_alignment(Rcpp::List activity_scores, Rcpp::CharacterVector query, Rcpp::CharacterVector genome, Rcpp::LogicalVector allow_bulge, Rcpp::LogicalVector search_both_strands);
RcppExport SEXP _CFDscoRe_private_optimal_alignment(SEXP activity_scoresSEXP, SEXP querySEXP, SEXP genomeSEXP, SEXP allow_bulgeSEXP, SEXP search_both_strandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type activity_scores(activity_scoresSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type genome(genomeSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type allow_bulge(allow_bulgeSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type search_both_strands(search_both_strandsSEXP);
    rcpp_result_gen = Rcpp::wrap(private_optimal_alignment(activity_scores, query, genome, allow_bulge, search_both_strands));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CFDscoRe_private_cfd_score", (DL_FUNC) &_CFDscoRe_private_cfd_score, 5},
    {"_CFDscoRe_private_optimal_alignment", (DL_FUNC) &_CFDscoRe_private_optimal_alignment, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_CFDscoRe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
